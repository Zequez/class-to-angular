// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var __slice = [].slice;

  window.classToDirective = function(constructor) {
    var attr, directiveReturn, explicitInjections, explicitLinkExists, injection, injectionRequested, injections, name, stringConstructor;
    explicitLinkExists = typeof constructor.link === 'function';
    if (constructor.directive != null) {
      name = constructor.directive;
    } else {
      stringConstructor = constructor.toString();
      name = stringConstructor.match(/^function ([^\n]+)Directive/);
      if (name) {
        name = name[1];
      } else {
        name = stringConstructor.match(/^function ([^\n]+\()/);
        if (name) {
          name = name[1];
        }
      }
      name = name.charAt(0).toLowerCase() + name.slice(1);
    }
    directiveReturn = {};
    for (attr in constructor) {
      directiveReturn[attr] = constructor[attr];
    }
    injectionRequested = (constructor.inject != null) && (constructor.inject.length != null);
    if (injectionRequested) {
      injections = [];
      explicitInjections = (function() {
        var _i, _len, _ref, _results;
        _ref = constructor.inject;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          injection = _ref[_i];
          _results.push(injection);
        }
        return _results;
      })();
      explicitInjections.push(function() {
        var injected;
        injected = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        injections = injected;
        return directiveReturn;
      });
    } else {
      explicitInjections = function() {
        return directiveReturn;
      };
    }
    directiveReturn.link = function(scope, element, attrs) {
      var i, injectionName, _i, _len, _ref;
      for (attr in constructor.prototype) {
        scope[attr] = constructor.prototype[attr];
      }
      if (injectionRequested) {
        _ref = constructor.inject;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          injectionName = _ref[i];
          scope[injectionName] = injections[i];
        }
      }
      constructor.apply(scope, element, attrs);
      if (explicitLinkExists) {
        return constructor.link(scope, element, attrs);
      }
    };
    return [name, explicitInjections];
  };

}).call(this);
